{"ast":null,"code":"import React,{memo,Fragment}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default/*#__PURE__*/memo(function(){return/*#__PURE__*/_jsx(Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Lazy Loading Example\"}),/*#__PURE__*/_jsx(\"p\",{children:\"This example demonstrates how to lazily load both route elements and even entire portions of your route hierarchy on demand. To get the full effect of this demo, be sure to open your Network tab and watch the new bundles load dynamically as you navigate around.\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"The \\\"About\\\" page is not loaded until you click on the link. When you do, a \",/*#__PURE__*/_jsx(\"code\",{children:\"<React.Suspense fallback>\"}),\" renders while the code is loaded via a dynamic \",/*#__PURE__*/_jsx(\"code\",{children:\"import()\"}),\" statement. Once the code loads, the fallback is replaced by the actual code for that page.\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"The \\\"Dashboard\\\" page does the same thing, but takes it even one step further by \",/*#__PURE__*/_jsx(\"em\",{children:\"dynamically defining additional routes\"}),\" once the page loads! Since React Router lets you declare your routes as\",/*#__PURE__*/_jsx(\"code\",{children:\"<Route>\"}),\" elements, you can easily define more routes by placing an additional \",/*#__PURE__*/_jsx(\"code\",{children:\"<Routes>\"}),\" element anywhere further down the element tree. Just be sure the parent route ends with a\",\" \",/*#__PURE__*/_jsx(\"code\",{children:\"*\"}),\" like \",/*#__PURE__*/_jsx(\"code\",{children:\"<Route path=\\\"dashboard/*\\\">\"}),\" in this case.\"]})]})});});","map":{"version":3,"names":["React","memo","Fragment"],"sources":["/Users/rezaaditya/Documents/github/my-mui-app/src/Containers/Dashboard/index.js"],"sourcesContent":["import React, { memo, Fragment } from 'react';\n\nexport default memo(() => {\n  return (\n    <Fragment>\n      <div>\n        <h1>Lazy Loading Example</h1>\n\n        <p>\n          This example demonstrates how to lazily load both route elements and\n          even entire portions of your route hierarchy on demand. To get the full\n          effect of this demo, be sure to open your Network tab and watch the new\n          bundles load dynamically as you navigate around.\n        </p>\n\n        <p>\n          The \"About\" page is not loaded until you click on the link. When you do,\n          a <code>&lt;React.Suspense fallback&gt;</code> renders while the code is\n          loaded via a dynamic <code>import()</code> statement. Once the code\n          loads, the fallback is replaced by the actual code for that page.\n        </p>\n\n        <p>\n          The \"Dashboard\" page does the same thing, but takes it even one step\n          further by <em>dynamically defining additional routes</em> once the page\n          loads! Since React Router lets you declare your routes as\n          <code>&lt;Route&gt;</code> elements, you can easily define more routes\n          by placing an additional <code>&lt;Routes&gt;</code> element anywhere\n          further down the element tree. Just be sure the parent route ends with a{\" \"}\n          <code>*</code> like <code>&lt;Route path=\"dashboard/*\"&gt;</code> in\n          this case.\n        </p>\n      </div>\n    </Fragment>\n  )\n})"],"mappings":"AAAA,MAAOA,MAAK,EAAIC,IAAI,CAAEC,QAAQ,KAAQ,OAAO,CAAC,wFAE9C,2BAAeD,IAAI,CAAC,UAAM,CACxB,mBACE,KAAC,QAAQ,wBACP,oCACE,4CAA6B,cAE7B,4RAKI,cAEJ,kHAEI,mDAA4C,iEACzB,kCAAqB,iGAExC,cAEJ,uHAEa,8DAA+C,yFAE1D,iCAA0B,uFACD,kCAA2B,8FACqB,GAAG,cAC5E,2BAAc,uBAAM,sDAA6C,oBAE/D,GACA,EACG,CAEf,CAAC,CAAC"},"metadata":{},"sourceType":"module"}